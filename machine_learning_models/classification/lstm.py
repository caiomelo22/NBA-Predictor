# -*- coding: utf-8 -*-
"""LSTM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19NQOKEK4GUOpMOh9TDJ6NXjyNVafDuXI

# Artificial Neural Network

### Importing the libraries
"""

import numpy as np
import pandas as pd
import tensorflow as tf
import matplotlib.pyplot as plt
import keras

print(keras.__version__)
tf.__version__

"""## Part 1 - Data Preprocessing

### Importing the dataset
"""

dataset = pd.read_csv('../../data/seasons/winner/2008-2018.csv')
dataset['WINNER'] = dataset['WINNER'].map({'A': 1, 'B': 0})
X = dataset.iloc[:, 4:-1].values
y = dataset.iloc[:, -1].values
print(dataset.iloc[:, 4:-1].columns, len(dataset.iloc[:, 4:-1].columns))
print(len(X))
# print(dataset['WINNER'])

"""### Splitting the dataset into the Training set and Test set"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25)
X_test, X_validation, y_test, y_validation = train_test_split(X_test, y_test, test_size=0.2)

"""### Feature Scaling"""

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)
X_validation = sc.transform(X_validation)
print(X_train)

"""## Part 2 - Building the ANN

### Building the ANN
"""

print(X_train.shape)

X_train = np.reshape(X_train, (X_train.shape[0], 1, X_train.shape[1]))
X_test = np.reshape(X_test, (X_test.shape[0], 1, X_test.shape[1]))
X_validation = np.reshape(X_validation, (X_validation.shape[0], 1, X_validation.shape[1]))

print(X_train.shape)

input_shape = (len(X_train), len(dataset.iloc[:, 4:-1].columns)) 
print(input_shape)

lstm = keras.Sequential()
print(input_shape)
# 2 LSTM layers
lstm.add(keras.layers.LSTM(68, input_shape=input_shape, return_sequences=False))
# lstm.add(keras.layers.LSTM(28))

# dense layer
# lstm.add(keras.layers.Dense(28, activation='relu'))
# lstm.add(keras.layers.Dropout(0.9))

# output layer
lstm.add(tf.keras.layers.Dense(units=1, activation='sigmoid'))

"""## Part 3 - Training the ANN

### Compiling the ANN
"""
# print(keras.optimizers.__dict__)
optimiser = tf.keras.optimizers.Adam(learning_rate=0.0001)
lstm.compile(optimizer=optimiser,
              loss='binary_crossentropy',
              metrics=['accuracy'])
lstm.summary()

"""### Training the ANN on the Training set"""

history = lstm.fit(X_train, y_train, validation_data=(X_test, y_test), batch_size = 32, epochs = 100)

"""Checking for overfittiing"""

fig, axs = plt.subplots(2)

# create accuracy sublpot
axs[0].plot(history.history["accuracy"], label="train accuracy")
axs[0].plot(history.history["val_accuracy"], label="test accuracy")
axs[0].set_ylabel("Accuracy")
axs[0].legend(loc="lower right")
axs[0].set_title("Accuracy eval")

# create error sublpot
axs[1].plot(history.history["loss"], label="train error")
axs[1].plot(history.history["val_loss"], label="test error")
axs[1].set_ylabel("Error")
axs[1].set_xlabel("Epoch")
axs[1].legend(loc="upper right")
axs[1].set_title("Error eval")

plt.show()

"""## Part 4 - Making the predictions and evaluating the model

### Predicting the result of a single observation

**Solution**
"""

# print(lstm.predict(sc.transform([[1, 0, 0, 600, 1, 40, 3, 60000, 2, 1, 1, 50000]])) > 0.5)

"""### Predicting the Test set results"""

y_pred = lstm.predict(X_validation)
print(y_pred)

rows = y_pred.shape[0]
cols = y_pred.shape[1]

y_less_risk_test = []
y_less_risk_pred = []

for y in range(0, rows -1):
  if y_pred[y][0] <= 0.4 or y_pred[y][0] >= 0.6:
    y_less_risk_test.append(y_validation[y])
    y_less_risk_pred.append(y_pred[y] > 0.5)

y_less_risk_test = np.array(y_less_risk_test)
y_less_risk_pred = np.array(y_less_risk_pred)

from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_less_risk_test, y_less_risk_pred)
print(cm)
print(accuracy_score(y_less_risk_test, y_less_risk_pred))

y_pred = (y_pred > 0.5)

"""### Making the Confusion Matrix"""

from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_validation, y_pred)
print(cm)
print(accuracy_score(y_validation, y_pred))